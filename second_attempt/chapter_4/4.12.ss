(define (scan vars vals on-null on-found)
  (cond ((null? vars)
         (on-null))
        ((eq? var (car vars))
         (on-found vals))
        (else (scan (cdr vars) (cdr vals)))))

(define (lookup-variable-value var env)
  (define (env-loop env)
    (if (eq? env the-empty-environment)
        (error "Unbound variable" var)
        (let ((frame (first-frame env)))
          (scan (frame-variables frame)
                (frame-values frame)
                (lambda () (env-loop (enclosing-environment env)))
                (lambda (vals) (car vals))))))
  (env-loop env))

(define (set-variable-value! var val env)
  (define (env-loop env)
    (if (eq? env the-empty-environment)
        (error "Unbound variable -- SET!" var)
        (let ((frame (first-frame env)))
          (scan (frame-variables frame)
                (frame-values frame)
                (lambda () (env-loop (enclosing-environment env)))
                (lambda (vals) (set-car! vals val))))))
  (env-loop env))

(define (define-variable! var val env)
  (let ((frame (first-frame env)))
    (scan (frame-variables frame)
          (frame-values frame)
          (lambda () (add-binding-to-frame! var val frame))
          (lambda (vals) (set-var! vals val)))))
